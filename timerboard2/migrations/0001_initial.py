# Generated by Django 2.2.13 on 2020-08-05 20:35

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import multiselectfield.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("eveonline", "0012_index_additions"),
        ("eveuniverse", "0002_load_eveunit"),
    ]

    operations = [
        migrations.CreateModel(
            name="General",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            options={
                "permissions": (
                    ("basic_access", "Can access this app"),
                    ("timer_management", "Can create and edit timers"),
                ),
                "managed": False,
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="DiscordWebhook",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="short name to identify this webhook",
                        max_length=64,
                        unique=True,
                    ),
                ),
                (
                    "url",
                    models.CharField(
                        help_text="URL of this webhook, e.g. https://discordapp.com/api/webhooks/123456/abcdef",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="you can add notes about this webhook here if you want",
                        null=True,
                    ),
                ),
                (
                    "is_enabled",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="whether notifications are currently sent to this webhook",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NotificationRule",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "minutes",
                    models.PositiveIntegerField(
                        choices=[
                            (0, "0"),
                            (5, "5"),
                            (10, "10"),
                            (15, "15"),
                            (30, "30"),
                            (45, "45"),
                            (60, "60"),
                            (120, "120"),
                        ],
                        db_index=True,
                        help_text="Time before event in minutes when notifications are sent",
                    ),
                ),
                (
                    "ping_type",
                    models.CharField(
                        choices=[
                            ("PN", "(no ping)"),
                            ("PH", "@here"),
                            ("PE", "@everyone"),
                        ],
                        default="PN",
                        help_text="Options for pinging for every notification",
                        max_length=2,
                    ),
                ),
                (
                    "is_enabled",
                    models.BooleanField(
                        default=True, help_text="whether this rule is currently active"
                    ),
                ),
                (
                    "require_timer_types",
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[
                            ("NO", "None"),
                            ("AR", "Armor"),
                            ("HL", "Hull"),
                            ("AN", "Anchoring"),
                            ("UA", "Unanchoring"),
                            ("MM", "Moon Mining"),
                        ],
                        help_text="Timer must have one of the given timer types or leave blank to match any.",
                        max_length=17,
                    ),
                ),
                (
                    "require_objectives",
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[
                            ("UN", "Undefined"),
                            ("HO", "Hostile"),
                            ("FR", "Friendly"),
                            ("NE", "Neutral"),
                        ],
                        help_text="Timer must have one of the given objectives or leave blank to match any.",
                        max_length=11,
                    ),
                ),
                (
                    "require_alliances",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Timer must be created by one of the given alliances or leave blank to match any.",
                        to="eveonline.EveAllianceInfo",
                    ),
                ),
                (
                    "require_corporations",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Timer must be created by one of the given corporations or leave blank to match any.",
                        to="eveonline.EveCorporationInfo",
                    ),
                ),
                (
                    "webhooks",
                    models.ManyToManyField(
                        help_text="Webhooks notifications are sent to",
                        to="timerboard2.DiscordWebhook",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ScheduledNotification",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("celery_task_id", models.CharField(max_length=765)),
                ("timer_date", models.DateTimeField(db_index=True)),
                ("notification_date", models.DateTimeField(db_index=True)),
                (
                    "notification_rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="timerboard2.NotificationRule",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Timer",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "timer_type",
                    models.CharField(
                        choices=[
                            ("NO", "None"),
                            ("AR", "Armor"),
                            ("HL", "Hull"),
                            ("AN", "Anchoring"),
                            ("UA", "Unanchoring"),
                            ("MM", "Moon Mining"),
                        ],
                        default="NO",
                        max_length=2,
                        verbose_name="timer type",
                    ),
                ),
                (
                    "location_details",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Additional information about the location of this structure, e.g. name of nearby planet / moon / gate",
                        max_length=254,
                        verbose_name="location details",
                    ),
                ),
                (
                    "structure_name",
                    models.CharField(blank=True, default="", max_length=254),
                ),
                (
                    "objective",
                    models.CharField(
                        choices=[
                            ("UN", "Undefined"),
                            ("HO", "Hostile"),
                            ("FR", "Friendly"),
                            ("NE", "Neutral"),
                        ],
                        default="UN",
                        max_length=2,
                        verbose_name="objective",
                    ),
                ),
                (
                    "date",
                    models.DateTimeField(
                        db_index=True, help_text="Date when this timer happens"
                    ),
                ),
                (
                    "is_important",
                    models.BooleanField(
                        default=False, help_text="Mark this timer as is_important"
                    ),
                ),
                (
                    "owner_name",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Name of the corporation owning the structure",
                        max_length=254,
                        null=True,
                    ),
                ),
                (
                    "is_opsec",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Limit access to users with OPSEC clearance. Can be combined with visibility.",
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("UN", "Unrestricted"),
                            ("AL", "Alliance only"),
                            ("CO", "Corporation only"),
                        ],
                        db_index=True,
                        default="UN",
                        help_text="The visibility of this timer can be limited to members of your organization",
                        max_length=2,
                    ),
                ),
                (
                    "details_image_url",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="URL for details like a screenshot of the structure's fitting, e.g. https://www.example.com/route/image.jpg",
                        max_length=1024,
                        null=True,
                    ),
                ),
                (
                    "details_notes",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="Notes with additional information about this timer",
                    ),
                ),
                (
                    "eve_alliance",
                    models.ForeignKey(
                        default=None,
                        help_text="Alliance of the user who created this timer",
                        null=True,
                        on_delete=django.db.models.deletion.SET_DEFAULT,
                        related_name="Timers",
                        to="eveonline.EveAllianceInfo",
                    ),
                ),
                (
                    "eve_character",
                    models.ForeignKey(
                        default=None,
                        help_text="Main character of the user who created this timer",
                        null=True,
                        on_delete=django.db.models.deletion.SET_DEFAULT,
                        related_name="Timers",
                        to="eveonline.EveCharacter",
                    ),
                ),
                (
                    "eve_corporation",
                    models.ForeignKey(
                        default=None,
                        help_text="Corporation of the user who created this timer",
                        null=True,
                        on_delete=django.db.models.deletion.SET_DEFAULT,
                        related_name="Timers",
                        to="eveonline.EveCorporationInfo",
                    ),
                ),
                (
                    "eve_solar_system",
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eveuniverse.EveSolarSystem",
                    ),
                ),
                (
                    "scheduled_notifications",
                    models.ManyToManyField(
                        through="timerboard2.ScheduledNotification",
                        to="timerboard2.NotificationRule",
                    ),
                ),
                (
                    "structure_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eveuniverse.EveType",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="Timers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "permissions": (
                    ("view_opsec_timer", "Can view timers marked as is_opsec"),
                ),
            },
        ),
        migrations.AddField(
            model_name="schedulednotification",
            name="timer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="timerboard2.Timer"
            ),
        ),
        migrations.AddConstraint(
            model_name="schedulednotification",
            constraint=models.UniqueConstraint(
                fields=("timer", "notification_rule"),
                name="unique_notification_schedule",
            ),
        ),
    ]
